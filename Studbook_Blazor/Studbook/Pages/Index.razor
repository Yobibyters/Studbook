@page "/"
@inject ICalculationService calc
@inject IExportService export
@implements IDisposable

<div class="index-container">
    <div class="content">
        <div class="subjects" @ref=TableElem>
            <div class="rating">
                @Rating
            </div>
            @foreach (Subject subject in Subjects)
            {
                <SubjectEntry @key=subject
                              Subject=subject
                              RemoveCallback=@RemoveSubject
                              OnChange=@(() => calc.CalculateRating(Subjects))>
                </SubjectEntry>
            }
        </div>
        @if (Subjects.Count < 10)
        {
            <div class="button">
                <Button Text="Додати предмет" OnClick=AddSubject></Button>
            </div>
        }
    </div>
</div>

@code {
    List<Subject> Subjects { get; set; } = new();

    double Rating { get; set; }

    ElementReference TableElem;

    [Inject]
    IJSRuntime js { get; set; } = null!;
    IJSObjectReference jsModule { get; set; } = null!;

    protected override void OnInitialized()
    {
        export.ExportToClipboard += OnExportToClipboard;
        export.ExportToPng += OnExportToPng;
        export.ExportToJpeg += OnExportToJpeg;

        calc.RatingChanged += OnRatingChanged;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "/js/savers.js");
        }
    }

    private async void OnExportToClipboard(object? sender, EventArgs e)
    {
        await jsModule.InvokeVoidAsync("SaveToClipboard", TableElem);
    }

    private async void OnExportToPng(object? sender, EventArgs e)
    {
        await jsModule.InvokeVoidAsync("SaveToPng", TableElem);
    }

    private async void OnExportToJpeg(object? sender, EventArgs e)
    {
        await jsModule.InvokeVoidAsync("SaveToJpeg", TableElem);
    }

    private void OnRatingChanged(object sender, double rating)
    {
        Rating = rating;
        StateHasChanged();
    }

    private void AddSubject()
    {
        Subject newSubject = new Subject();
        Subjects.Add(newSubject);
    }

    private void RemoveSubject(Subject subject)
    {
        Subjects.Remove(subject);
        calc.CalculateRating(Subjects);
    }

    public void Dispose()
    {
        export.ExportToClipboard -= OnExportToClipboard;
        export.ExportToPng -= OnExportToPng;
        export.ExportToJpeg -= OnExportToJpeg;

        calc.RatingChanged -= OnRatingChanged;
    }
}