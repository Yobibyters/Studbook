<div @ref=SubjectScoreElem class="subject-score subject-add">
    <SubjectName @bind-Value=Subject.Name></SubjectName>
    <div class="items-nubmer">
        <NumberOf @bind-Value=Subject.Credit OnChange=@SubjectChanged Step=0.5 Min=0 Max=10></NumberOf>
        <NumberOf @bind-Value=Subject.Mark OnChange=@SubjectChanged Step=1 Min=0 Max=100></NumberOf>
        <div class="crutch"></div>
        <div @ref=RemoveBtnElem class="remove-btn">
            <i class="ph-bold ph-x"></i>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Subject Subject { get; set; } = null!;

    [Parameter]
    public EventCallback<Subject> RemoveCallback { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Inject]
    IJSRuntime js { get; set; } = null!;
    IJSObjectReference jsModule = null!;

    ElementReference RemoveBtnElem;
    ElementReference SubjectScoreElem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await js.InvokeAsync<IJSObjectReference>("import", "./Pages/Components/SubjectScore.razor.js");
            await jsModule.InvokeVoidAsync("SubjectScore.Init", DotNetObjectReference.Create(this), SubjectScoreElem, RemoveBtnElem);
        }
    }

    private async Task SubjectChanged()
    {
        await OnChange.InvokeAsync();
    }

    [JSInvokable]
    public async Task RemoveSubject()
    {
        await RemoveCallback.InvokeAsync(Subject);
    }
}
